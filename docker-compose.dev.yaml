
services:
  postgres:
    image: postgres:latest
    networks:
      - bank-network
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminSecret
      - POSTGRES_DB=simple_bank_py
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d simple_bank_py"]
      interval: 2s
      timeout: 5s
      retries: 10

  pgadmin4:
    image: dpage/pgadmin4
    networks:
      - bank-network
    ports: 
    - "8000:80"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=adminSecret
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  redis:
    image: redis:7-alpine
    networks:
      - bank-network
    ports:
      - "6379:6379"
      - "53"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 5s
      retries: 10
      
  migrations:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: >
      sh -c "
        echo 'Waiting for Postgres...';
        while ! pg_isready -h postgres -U admin -d simple_bank_py; do sleep 1; done;
        echo 'Making migrations...';
        python manage.py makemigrations --noinput;
        echo 'Running migrations...';
        python manage.py migrate --noinput
      "
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings
      - DATABASE_URL=postgres://admin:adminSecret@postgres:5432/simple_bank_py
      - POSTGRES_DB=simple_bank_py
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=adminSecret
      - POSTGRES_HOST=postgres
    networks:
      - bank-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: http://backend:5000
    networks:
      - bank-network
    ports:
      - "3000:80"
    depends_on:
      - backend

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
    networks:
      - bank-network
    environment:
      - DEBUG=1
      - POSTGRES_DB=simple_bank_py
      - POSTGRES_USER=simplebank
      - POSTGRES_PASSWORD=simplebankSecret
      - POSTGRES_HOST=postgres
      - DJANGO_ALLOWED_HOSTS=backend,localhost
    depends_on:
      postgres:
        condition: service_healthy

  seed_users:
    build:
      context: ./component_tests/seed_users
      dockerfile: Dockerfile.seed_users
    networks:
      - bank-network
    environment:
      - POSTGRES_DB=simple_bank_py
      - POSTGRES_USER=simplebank
      - POSTGRES_PASSWORD=simplebankSecret
      - POSTGRES_HOST=postgres
    depends_on:
      - postgres
      - migrations
  
  pytest_playwright_tests:
    build:
      context: ./component_tests/pytest_playwright_tests
      dockerfile: Dockerfile.pytest_playwright_tests
    networks:
      - bank-network
    depends_on:
      - frontend
      - backend
      - postgres
      - seed_users
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - APP_BASE_URL=http://frontend

  playwright_codegen_tests:
    build:
      context: ./component_tests/playwright_codegen_tests
      dockerfile: Dockerfile.playwright_codegen_tests
    networks:
      - bank-network
    depends_on:
      - frontend
      - backend
      - postgres
      - selenium
      - seed_users
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - APP_BASE_URL=http://frontend

  pytest_selenium_tests:
    build:
      context: ./component_tests/pytest_selenium_tests
      dockerfile: Dockerfile.pytest_selenium_tests
    networks:
      - bank-network
    depends_on:
      - frontend
      - backend
      - postgres
      - selenium
      - seed_users
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - APP_BASE_URL=http://frontend
      - SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub
    volumes:
      - ./test_reports:/reports

  behave_selenium_tests:
    build:
      context: ./component_tests/behave_selenium_tests
      dockerfile: Dockerfile.behave_selenium_tests
    networks:
      - bank-network
    depends_on:
      - frontend
      - backend
      - postgres
      - selenium
      - seed_users
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - APP_BASE_URL=http://frontend
      - SELENIUM_REMOTE_URL=http://selenium:4444/wd/hub

  selenium:
    image: selenium/standalone-chrome:123.0
    container_name: selenium
    environment:
      - APP_BASE_URL=http://frontend:3000
    networks:
      - bank-network
    ports:
      - "4444:4444"

  android-emulator:
    build:
      context: ./component_tests/android_emulator
      dockerfile: Dockerfile.android_emulator_new
    container_name: android-emulator
    privileged: true  # Required for KVM, even if using software rendering
    ports:
      - "4723:4723"
    environment:
      - AVD_NAME=ci_emulator
      - EMULATOR_GPU=swiftshader_indirect
      - APPIUM_HOST=android-emulator
    networks:
      - bank-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://android-emulator:4723/status | grep -q '\"ready\":true'"]
      interval: 10s
      timeout: 10s
      retries: 10

  pytest_appium_android:
    build:
      context: ./component_tests/pytest_appium_android_tests
      dockerfile: Dockerfile.pytest_appium_android
    depends_on:
      android-emulator:
        condition: service_healthy
      frontend:
        condition: service_started
      backend:
        condition: service_started
      postgres:
        condition: service_started
      selenium:
        condition: service_started
      seed_users:
        condition: service_started
    networks:
      - bank-network
    environment:
      - APPIUM_HOST=android-emulator

  postman_tests:
    build:
      context: ./component_tests/postman_tests
      dockerfile: Dockerfile.newman
    networks:
      - bank-network
    depends_on:
      - backend
      - seed_users
    command: >
      newman run "3 newman py-simplebank.postman_collection.json"
      --env-var base_url=http://backend:5000

  unittests:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: >
      sh -c "
        echo 'Making migrations...' &&
        python manage.py makemigrations --noinput &&
        echo 'Running migrations...' &&
        python manage.py migrate --noinput &&
        echo 'Running unit tests...' &&
        coverage run manage.py test --settings=config.settings_test &&
        coverage report
      "
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings_test
    networks:
    - bank-network

volumes:
  pgadmin-data:
      external: true
  postgres-data:
      external: true

networks:
  bank-network:
    driver: bridge

